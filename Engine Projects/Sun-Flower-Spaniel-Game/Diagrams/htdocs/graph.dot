digraph doxygraph
{
graph [ rankdir="RL" ]
"class_animation_component" [ label="AnimationComponent\n|+draw ( spriteBatch : Falcon::SpriteBatch &, deltaTime : float ) : void \{virtual\}\l/+init ( pNode : tinyxml2::XMLNode * ) : void \{virtual\}\l+setTileSheet ( filePath : const std::string & ) : void\l/+update ( obj : GameObject *, deltaTime : float ) : void \{virtual\}\l|#m_angle : float\l#m_animSpeed : float\l#m_animTime : float\l#m_body : b2Body *\l#m_color : Falcon::Color\l#m_destRect : glm::vec4\l#m_direction : DIRECTION\l#m_frameCount : int\l#m_spriteDims : glm::vec2\l#m_spritePos : glm::vec2\l#m_tileIndex : int\l#m_tileSheet : Falcon::TileSheet\l#m_tileSize : float\l" shape="record" ]
"class_component"
"class_animation_component" -> "class_component" [ arrowhead="empty" style="bold,dashed" ]
"struct_falcon_1_1_color"
"class_animation_component" -> "struct_falcon_1_1_color" [ arrowtail="diamond" dir="back" ]
"class_falcon_1_1_tile_sheet"
"class_animation_component" -> "class_falcon_1_1_tile_sheet" [ arrowtail="diamond" dir="back" ]
"class_app" [ label="App\n|+App (  )\l+addScreens (  ) : void\l+onExit (  ) : void\l+onInit (  ) : void\l+~App (  )\l|-m_gameplayScreen : std::unique_ptr\< GameplayScreen \>\l-m_mainmenuScreen : std::unique_ptr\< MainMenuScreen \>\l" shape="record" ]
"class_gameplay_screen"
"class_app" -> "class_gameplay_screen" [ arrowtail="odiamond" dir="back" ]
"class_main_menu_screen"
"class_app" -> "class_main_menu_screen" [ arrowtail="odiamond" dir="back" ]
"class_body_component" [ label="BodyComponent\n|+BodyComponent (  )\l/+destroy (  ) : void \{virtual\}\l+getBody (  ) : b2Body *\l+getPosition (  ) : glm::vec2\l+getWorld (  ) : b2World *\l+init ( world : b2World *, position : const glm::vec2, dimensions : const glm::vec2, bodyType : b2BodyType, fixedRotatio... ) : void\l/+init ( pNode : tinyxml2::XMLNode * ) : void \{virtual\}\l+setBody ( body : b2Body * ) : void\l+setPosition ( pos : glm::vec2 ) : void\l+setWorld ( world : b2World * ) : void\l/+update ( obj : GameObject *,  : float ) : void \{virtual\}\l|#m_body : b2Body *\l#m_world : b2World *\l" shape="record" ]
"class_body_component" -> "class_component" [ arrowhead="empty" style="bold,dashed" ]
"class_collision_component" [ label="CollisionComponent\n|+CollisionComponent (  )\l+drawDebug ( debugRenderer : Falcon::DebugRenderer &, color : Falcon::Color ) : void\l+getDimensions (  ) : glm::vec2\l+getFixture (  ) : b2Fixture *\l+init ( obj : GameObject *, shape : b2Shape *, dimensions : const glm::vec2 ) : void\l/+init ( pNode : tinyxml2::XMLNode * ) : void \{virtual\}\l+setDimensions ( dims : glm::vec2 ) : void\l+setFixture ( fixture : b2Fixture * ) : void\l+setObject ( obj : GameObject * ) : void\l/+update ( obj : GameObject *, deltaTime : float ) : void \{virtual\}\l|#m_body : b2Body *\l#m_dimensions : glm::vec2\l#m_fixture : b2Fixture *\l#m_obj : GameObject *\l" shape="record" ]
"class_collision_component" -> "class_component" [ arrowhead="empty" style="bold,dashed" ]
"class_game_object"
"class_collision_component" -> "class_game_object" [ arrowtail="odiamond" dir="back" ]
"class_component" [ label="Component\n«abstract»\n|+Component (  )\l+destroy (  ) : void \{virtual\}\l+init ( pNode : tinyxml2::XMLNode * ) : void \{pure-virtual\}\l+receive (  : Message ) : void \{virtual\}\l+update ( obj : GameObject *, deltaTime : float ) : void \{pure-virtual\}\l|#obj : GameObject *\l" shape="record" ]
"class_component" -> "class_game_object" [ arrowtail="odiamond" dir="back" ]
"class_contact_listener" [ label="ContactListener\n|-BeginContact ( contact : b2Contact * ) : void\l-EndContact ( contact : b2Contact * ) : void\l-getSensorAndCollide ( contact : b2Contact *, sensorEntity : GameObject *&, collideEntity : GameObject *& ) : bool\l|" shape="record" ]
"class_directional_animation_component" [ label="DirectionalAnimationComponent\n|/+draw ( spriteBatch : Falcon::SpriteBatch &, deltaTime : float ) : void \{virtual\}\l/+init ( pNode : tinyxml2::XMLNode * ) : void \{virtual\}\l|-m_tileIndexDownDir : int\l-m_tileIndexLeftDir : int\l-m_tileIndexLeftDownDir : int\l-m_tileIndexLeftUpDir : int\l-m_tileIndexRightDir : int\l-m_tileIndexRightDownDir : int\l-m_tileIndexRightUpDir : int\l-m_tileIndexUpDir : int\l" shape="record" ]
"class_directional_animation_component" -> "class_animation_component" [ arrowhead="empty" style="bold" ]
"class_falcon_1_1_basic_light" [ label="Falcon::BasicLight\n|+draw ( spriteBatch : SpriteBatch & ) : void\l|+color : Color\l+position : glm::vec2\l+size : float\l" shape="record" ]
"class_falcon_1_1_basic_light" -> "struct_falcon_1_1_color" [ arrowtail="diamond" dir="back" ]
"class_falcon_1_1_camera2_d" [ label="Falcon::Camera2D\n|+Camera2D (  )\l+getCameraMatrix (  ) : glm::mat4\l+getPosition (  ) : glm::vec2\l+getScale (  ) : float\l+init ( screenWidth : int, screenHeight : int ) : void\l+isBoxVisible ( position : const glm::vec2 &, dimensions : const glm::vec2 & ) : bool\l+screenToWorld ( screenCoords : glm::vec2 ) : glm::vec2\l+setPosition ( newPosition : const glm::vec2 & ) : void\l+setScale ( newScale : float ) : void\l+update (  ) : void\l+~Camera2D (  )\l|-m_cameraMatrix : glm::mat4\l-m_orthoMatrix : glm::mat4\l-m_position : glm::vec2\l-m_scale : float\l-m_screenHeight : int\l-m_screenWidth : int\l-m_shouldUpdate : bool\l" shape="record" ]
"struct_falcon_1_1_char_glyph" [ label="Falcon::CharGlyph\n||+character : char\l+size : glm::vec2\l+uvRect : glm::vec4\l" shape="record" ]
"struct_falcon_1_1_color" [ label="Falcon::Color\n|+Color (  )\l+Color ( _r : GLubyte, _g : GLubyte, _b : GLubyte, _a : GLubyte )\l+operator- ( c : const Color & ) : Color\l+setColor ( _r : GLubyte, _g : GLubyte, _b : GLubyte, _a : GLubyte ) : void\l|+a : GLubyte\l+b : GLubyte\l+g : GLubyte\l+r : GLubyte\l" shape="record" ]
"class_falcon_1_1_debug_renderer" [ label="Falcon::DebugRenderer\n|+DebugRenderer (  )\l+dispose (  ) : void\l+drawBox ( destRect : const glm::vec4 &, color : const Color &, angle : float ) : void\l+drawCircle ( center : const glm::vec2 &, color : const Color &, radius : float ) : void\l+end (  ) : void\l+init (  ) : void\l+render ( projectionMatrix : const glm::mat4 &, lineWidth : float ) : void\l+~DebugRenderer (  )\l|-m_ibo : GLuint\l-m_indices : std::vector\< GLuint \>\l-m_numElements : int\l-m_shaderProgram : Falcon::ShaderProgram\l-m_vao : GLuint\l-m_vbo : GLuint\l-m_verts : std::vector\< DebugVertex \>\l" shape="record" ]
"struct_falcon_1_1_debug_renderer_1_1_debug_vertex"
"class_falcon_1_1_debug_renderer" -> "struct_falcon_1_1_debug_renderer_1_1_debug_vertex" [ arrowtail="diamond" dir="back" ]
"class_falcon_1_1_shader_program"
"class_falcon_1_1_debug_renderer" -> "class_falcon_1_1_shader_program" [ arrowtail="diamond" dir="back" ]
"struct_falcon_1_1_debug_renderer_1_1_debug_vertex" [ label="Falcon::DebugRenderer::DebugVertex\n||+color : Falcon::Color\l+position : glm::vec2\l" shape="record" ]
"struct_falcon_1_1_debug_renderer_1_1_debug_vertex" -> "struct_falcon_1_1_color" [ arrowtail="diamond" dir="back" ]
"class_falcon_1_1_f_p_s_limiter" [ label="Falcon::FPSLimiter\n|+FPSLimiter (  )\l+begin (  ) : void\l+end (  ) : float\l+init ( targetFPS : float ) : void\l+setTargetFPS ( targetFPS : float ) : void\l-calculateFPS (  ) : void\l|-m_FPS : float\l-m_frameTime : float\l-m_maxFPS : float\l-m_startTicks : unsigned int\l-m_targetFPS : float\l" shape="record" ]
"struct_falcon_1_1_g_l_texture" [ label="Falcon::GLTexture\n||+height : int\l+id : GLuint\l+width : int\l" shape="record" ]
"class_falcon_1_1_glyph" [ label="Falcon::Glyph\n|+Glyph (  )\l+Glyph ( destRect : const glm::vec4 &, uvRect : const glm::vec4 &, Texture : GLuint, Depth : float, color : const Color ... )\l+Glyph ( destRect : const glm::vec4 &, uvRect : const glm::vec4 &, Texture : GLuint, Depth : float, color : const Color ... )\l-rotatePoint ( position : glm::vec2, angle : float ) : glm::vec2\l|+bottomLeft : Vertex\l+bottomRight : Vertex\l+depth : float\l+texture : GLuint\l+topLeft : Vertex\l+topRight : Vertex\l" shape="record" ]
"struct_falcon_1_1_vertex"
"class_falcon_1_1_glyph" -> "struct_falcon_1_1_vertex" [ arrowtail="diamond" dir="back" ]
"class_falcon_1_1_i_o_manager" [ label="Falcon::IOManager\n|+readFileToBuffer ( filePath : std::string, buffer : std::string & ) : bool \{static\}\l+readFileToBuffer ( filePath : std::string, buffer : std::vector\< unsigned char \> & ) : bool \{static\}\l|" shape="record" ]
"class_falcon_1_1_image_loader" [ label="Falcon::ImageLoader\n|+loadPNG ( filePath : std::string & ) : GLTexture \{static\}\l|" shape="record" ]
"class_falcon_1_1_input_manager" [ label="Falcon::InputManager\n|+getMouseCoords (  ) : glm::vec2\l+instance (  ) : InputManager & \{static\}\l+isKeyDown ( keyID : unsigned int ) : bool\l+isKeyPressed ( keyID : unsigned int ) : bool\l+pressKey ( keyID : unsigned int ) : void\l+releaseKey ( keyID : unsigned int ) : void\l+setMouseCoords ( x : float, y : float ) : void\l+update (  ) : void\l-InputManager (  )\l-wasKeyDown ( keyID : unsigned int ) : bool\l|-_previousKeyMap : std::unordered_map\< unsigned int, bool \>\l-m_keyMap : std::unordered_map\< unsigned int, bool \>\l-m_mouseCoords : glm::vec2\l" shape="record" ]
"class_falcon_1_1_particle" [ label="Falcon::Particle\n||+color : Color\l+life : float\l+position : glm::vec2\l+velocity : glm::vec2\l+width : float\l" shape="record" ]
"class_falcon_1_1_particle" -> "struct_falcon_1_1_color" [ arrowtail="diamond" dir="back" ]
"class_falcon_1_1_particle_batch" [ label="Falcon::ParticleBatch\n|+ParticleBatch (  )\l+addParticle ( position : const glm::vec2, velocity : const glm::vec2, color : const Color, width : float ) : void\l+draw ( spriteBatch : SpriteBatch * ) : void\l+init ( maxParticles : int, decayRate : float, texture : GLTexture, updateFunc : std::function\< void(Particle &, float)\>... ) : void\l+update ( deltaTime : float ) : void\l+~ParticleBatch (  )\l-findFreeParticle (  ) : int\l|-m_decayRate : float\l-m_firstFreeParticle : int\l-m_maxParticles : int\l-m_particles : Particle *\l-m_texture : GLTexture\l-m_updateFunc : std::function\< void(Particle &, float)\>\l" shape="record" ]
"class_falcon_1_1_particle_batch" -> "class_falcon_1_1_particle" [ arrowtail="odiamond" dir="back" ]
"class_falcon_1_1_particle_batch" -> "struct_falcon_1_1_g_l_texture" [ arrowtail="diamond" dir="back" ]
"class_falcon_1_1_particle_system" [ label="Falcon::ParticleSystem\n|+ParticleSystem (  )\l+addParticleBatch ( particleBatch : ParticleBatch * ) : void\l+draw ( spriteBatch : SpriteBatch * ) : void\l+update ( deltaTime : float ) : void\l+~ParticleSystem (  )\l|-m_batches : std::vector\< ParticleBatch * \>\l" shape="record" ]
"class_falcon_1_1_particle_system" -> "class_falcon_1_1_particle_batch" [ arrowtail="odiamond" dir="back" ]
"struct_falcon_1_1_position" [ label="Falcon::Position\n||+x : float\l+y : float\l" shape="record" ]
"class_falcon_1_1_projectile" [ label="Falcon::Projectile\n|+Projectile ( position : glm::vec2, direction : glm::vec2, speed : float, lifeTime : int )\l+draw ( spriteBatch : Falcon::SpriteBatch & ) : void\l+update (  ) : bool\l+~Projectile (  )\l|-m_direction : glm::vec2\l-m_lifeTime : int\l-m_position : glm::vec2\l-m_speed : float\l" shape="record" ]
"class_falcon_1_1_render_batch" [ label="Falcon::RenderBatch\n|+RenderBatch ( _offset : GLuint, _num : GLuint, _texture : GLuint )\l|+numVertices : GLuint\l+offset : GLuint\l+texture : GLuint\l" shape="record" ]
"class_falcon_1_1_resource_manager" [ label="Falcon::ResourceManager\n|+getTexture ( filePath : std::string ) : GLTexture \{static\}\l|+boundTexture : GLuint \{static\}\l-m_textureCache : TextureCache \{static\}\l" shape="record" ]
"class_falcon_1_1_texture_cache"
"class_falcon_1_1_resource_manager" -> "class_falcon_1_1_texture_cache" [ arrowtail="diamond" dir="back" ]
"class_falcon_1_1_shader_program" [ label="Falcon::ShaderProgram\n|+ShaderProgram (  )\l+addAttribute ( attributeName : const std::string & ) : void\l+compileShaders ( vertShaderPath : const std::string &, fragShaderPath : const std::string & ) : void\l+compileShadersFromSource ( vertexSource : const char *, fragmentSource : const char * ) : void\l+dispose (  ) : void\l+getUniformLocation ( uniformName : const std::string & ) : GLint\l+linkShaders (  ) : void\l+unuse (  ) : void\l+use (  ) : void\l+~ShaderProgram (  )\l-compileShader ( source : const char *, name : const std::string &, id : GLuint ) : void\l|-m_fragShaderID : GLuint\l-m_numAttributes : GLuint\l-m_programID : GLuint\l-m_vertShaderID : GLuint\l" shape="record" ]
"class_falcon_1_1_sprite" [ label="Falcon::Sprite\n|+Sprite (  )\l+draw (  ) : void\l+init ( x : float, y : float, width : float, height : float, texturePath : std::string ) : void\l+~Sprite (  )\l|-m_height : float\l-m_texture : GLTexture\l-m_vboID : GLuint\l-m_width : float\l-m_x : float\l-m_y : float\l" shape="record" ]
"class_falcon_1_1_sprite" -> "struct_falcon_1_1_g_l_texture" [ arrowtail="diamond" dir="back" ]
"class_falcon_1_1_sprite_batch" [ label="Falcon::SpriteBatch\n|+SpriteBatch (  )\l+begin ( sortType : GlyphSortType ) : void\l+draw ( destRect : const glm::vec4 &, uvRect : const glm::vec4 &, texture : GLuint, depth : float, color : const Color &... ) : void\l+draw ( destRect : const glm::vec4 &, uvRect : const glm::vec4 &, texture : GLuint, depth : float, color : const Color &... ) : void\l+draw ( destRect : const glm::vec4 &, uvRect : const glm::vec4 &, texture : GLuint, depth : float, color : const Color &... ) : void\l+end (  ) : void\l+init (  ) : void\l+renderBatch (  ) : void\l-cmpBTF ( a : Glyph *, b : Glyph * ) : bool \{static\}\l-cmpFTB ( a : Glyph *, b : Glyph * ) : bool \{static\}\l-cmpTXT ( a : Glyph *, b : Glyph * ) : bool \{static\}\l-createRenderBatches (  ) : void\l-createVertexArray (  ) : void\l-sortGlyphs (  ) : void\l|-m_glyphPtrs : std::vector\< Glyph * \>\l-m_glyphs : std::vector\< Glyph \>\l-m_renderBatches : std::vector\< RenderBatch \>\l-m_sortType : GlyphSortType\l-m_vao : GLuint\l-m_vbo : GLuint\l" shape="record" ]
"class_falcon_1_1_sprite_batch" -> "class_falcon_1_1_glyph" [ arrowtail="odiamond" dir="back" ]
"class_falcon_1_1_sprite_batch" -> "class_falcon_1_1_glyph" [ arrowtail="diamond" dir="back" ]
"class_falcon_1_1_sprite_batch" -> "class_falcon_1_1_render_batch" [ arrowtail="diamond" dir="back" ]
"class_falcon_1_1_sprite_font" [ label="Falcon::SpriteFont\n|+SpriteFont (  )\l+SpriteFont ( font : const char *, size : int )\l+SpriteFont ( font : const char *, size : int, cs : char, ce : char )\l+dispose (  ) : void\l+draw ( batch : SpriteBatch &, s : const char *, position : glm::vec2, scaling : glm::vec2, depth : float, tint : Color,... ) : void\l+getFontHeight (  ) : int\l+init ( font : const char *, size : int ) : void\l+init ( font : const char *, size : int, cs : char, ce : char ) : void\l+measure ( s : const char * ) : glm::vec2\l-createRows ( rects : glm::ivec4 *, rectsLength : int, r : int, padding : int, w : int & ) : std::vector\< int \> * \{static\}\l|-_fontHeight : int\l-_glyphs : CharGlyph *\l-_regLength : int\l-_regStart : int\l-_texID : unsigned int\l" shape="record" ]
"class_falcon_1_1_sprite_font" -> "struct_falcon_1_1_char_glyph" [ arrowtail="odiamond" dir="back" ]
"class_falcon_1_1_texture_cache" [ label="Falcon::TextureCache\n|+TextureCache (  )\l+getTexture ( filePath : std::string ) : GLTexture\l+~TextureCache (  )\l|-textureMap : std::map\< std::string, GLTexture \>\l" shape="record" ]
"class_falcon_1_1_texture_cache" -> "struct_falcon_1_1_g_l_texture" [ arrowtail="diamond" dir="back" ]
"class_falcon_1_1_tile_sheet" [ label="Falcon::TileSheet\n|+getUVs ( index : int ) : glm::vec4\l+init ( texture : const GLTexture, tileDims : const glm::ivec2 & ) : void\l|+dims : glm::ivec2\l+texture : GLTexture\l" shape="record" ]
"class_falcon_1_1_tile_sheet" -> "struct_falcon_1_1_g_l_texture" [ arrowtail="diamond" dir="back" ]
"struct_falcon_1_1_u_v" [ label="Falcon::UV\n||+u : float\l+v : float\l" shape="record" ]
"struct_falcon_1_1_vertex" [ label="Falcon::Vertex\n|+setColor ( r : GLubyte, g : GLubyte, b : GLubyte, a : GLubyte ) : void\l+setPosition ( x : float, y : float ) : void\l+setUV ( u : float, v : float ) : void\l|+color : Color\l+position : Position\l+uv : UV\l" shape="record" ]
"struct_falcon_1_1_vertex" -> "struct_falcon_1_1_u_v" [ arrowtail="diamond" dir="back" ]
"struct_falcon_1_1_vertex" -> "struct_falcon_1_1_color" [ arrowtail="diamond" dir="back" ]
"struct_falcon_1_1_vertex" -> "struct_falcon_1_1_position" [ arrowtail="diamond" dir="back" ]
"class_falcon_1_1_window" [ label="Falcon::Window\n|+Window (  )\l+create ( windowName : std::string, screenWidth : int, screenHeight : int, currentFlags : unsigned int ) : int\l+getSDLWindow (  ) : SDL_Window *\l+getScreenHeight (  ) : int\l+getScreenWidth (  ) : int\l+swapBuffer (  ) : void\l+~Window (  )\l|-m_screenHeight : int\l-m_screenWidth : int\l-m_sdlWindow : SDL_Window *\l" shape="record" ]
"class_game" [ label="Game\n|+Game (  )\l+run (  ) : void\l+~Game (  )\l-draw (  ) : void\l-gameLoop (  ) : void\l-initShaders (  ) : void\l-initSystems (  ) : void\l-processInput (  ) : void\l|-m_FPS : float\l-m_FPSLimiter : Falcon::FPSLimiter\l-m_camera : Falcon::Camera2D\l-m_currentState : Falcon::StateType\l-m_inputManager : Falcon::InputManager\l-m_projectiles : std::vector\< Falcon::Projectile \>\l-m_screenHeight : int\l-m_screenWidth : int\l-m_shaderProgram : Falcon::ShaderProgram\l-m_spriteBatch : Falcon::SpriteBatch\l-m_time : float\l-m_window : Falcon::Window\l" shape="record" ]
"class_game" -> "class_falcon_1_1_projectile" [ arrowtail="diamond" dir="back" ]
"class_game" -> "class_falcon_1_1_window" [ arrowtail="diamond" dir="back" ]
"class_game" -> "class_falcon_1_1_input_manager" [ arrowtail="diamond" dir="back" ]
"class_game" -> "class_falcon_1_1_f_p_s_limiter" [ arrowtail="diamond" dir="back" ]
"class_game" -> "class_falcon_1_1_sprite_batch" [ arrowtail="diamond" dir="back" ]
"class_game" -> "class_falcon_1_1_camera2_d" [ arrowtail="diamond" dir="back" ]
"class_game" -> "class_falcon_1_1_shader_program" [ arrowtail="diamond" dir="back" ]
"class_game_object" [ label="GameObject\n|+GameObject (  )\l+attachComponent (  ) : std::shared_ptr\< T \>\l+destroy (  ) : void\l+getComponent (  ) : std::shared_ptr\< T \>\l+getDirection (  ) : DIRECTION\l+isDestroyed (  ) : bool\l+send ( message : Message ) : void\l+setDirection ( dir : DIRECTION ) : void\l+update ( deltaTime : float ) : void \{virtual\}\l|#m_components : std::vector\< std::shared_ptr\< Component \> \>\l#m_direction : DIRECTION\l#m_isDestroyed : bool\l" shape="record" ]
"class_game_object" -> "class_component" [ arrowtail="odiamond" dir="back" ]
"class_gameplay_screen" [ label="GameplayScreen\n|+GameplayScreen ( window : Falcon::Window * )\l+create (  ) : void\l+destroy (  ) : void\l+draw ( deltaTime : float ) : void\l+getNextScreenIndex (  ) : int\l+getPrevScreenIndex (  ) : int\l+onEntry (  ) : void\l+onExit (  ) : void\l+update ( deltaTime : float ) : void\l+~GameplayScreen (  )\l-checkInput (  ) : void\l-compileShader ( shaderProgram : Falcon::ShaderProgram &, vertPath : const std::string &, fragPath : const std::string &... ) : void\l-getRamUsage (  ) : int\l|-m_camera : Falcon::Camera2D\l-m_darker : int\l-m_debugRender : Falcon::DebugRenderer\l-m_gameObjects : std::vector\< std::shared_ptr\< GameObject \> \> *\l-m_lightProgram : Falcon::ShaderProgram\l-m_lightSpriteBatch : Falcon::SpriteBatch\l-m_map : Map\l-m_player : std::shared_ptr\< GameObject \>\l-m_renderDebug : bool\l-m_spriteBatch : Falcon::SpriteBatch\l-m_textureProgram : Falcon::ShaderProgram\l-m_time : float\l-m_window : Falcon::Window *\l-m_world : std::unique_ptr\< b2World \>\l-mouseLight : Falcon::BasicLight\l-mouse_color : float\l-playerLight : Falcon::BasicLight\l" shape="record" ]
"class_gameplay_screen" -> "class_game_object" [ arrowtail="odiamond" dir="back" ]
"class_gameplay_screen" -> "class_falcon_1_1_window" [ arrowtail="odiamond" dir="back" ]
"class_gameplay_screen" -> "class_falcon_1_1_basic_light" [ arrowtail="diamond" dir="back" ]
"class_gameplay_screen" -> "class_falcon_1_1_shader_program" [ arrowtail="diamond" dir="back" ]
"class_gameplay_screen" -> "class_falcon_1_1_camera2_d" [ arrowtail="diamond" dir="back" ]
"class_map"
"class_gameplay_screen" -> "class_map" [ arrowtail="diamond" dir="back" ]
"class_gameplay_screen" -> "class_falcon_1_1_sprite_batch" [ arrowtail="diamond" dir="back" ]
"class_gameplay_screen" -> "class_falcon_1_1_debug_renderer" [ arrowtail="diamond" dir="back" ]
"class_interactive_component" [ label="InteractiveComponent\n|+draw ( spriteBatch : Falcon::SpriteBatch &,  : float ) : void \{virtual\}\l+endContact (  ) : void\l/+init ( pNode : tinyxml2::XMLNode * ) : void \{virtual\}\l+startContact (  ) : void\l/+update ( obj : GameObject *,  : float ) : void \{virtual\}\l|-m_color : Falcon::Color\l-m_interactionKeyID : unsigned int\l-m_interactionType : std::string\l-m_position : glm::vec2\l-m_spriteFont : Falcon::SpriteFont *\l-m_text : std::string\l-m_textScale : float\l-m_visible : bool\l" shape="record" ]
"class_interactive_component" -> "class_component" [ arrowhead="empty" style="bold,dashed" ]
"class_interactive_component" -> "class_falcon_1_1_sprite_font" [ arrowtail="odiamond" dir="back" ]
"class_interactive_component" -> "struct_falcon_1_1_color" [ arrowtail="diamond" dir="back" ]
"class_main_menu_screen" [ label="MainMenuScreen\n|+MainMenuScreen ( window : Falcon::Window * )\l+create (  ) : void\l+destroy (  ) : void\l+draw ( deltaTime : float ) : void\l+getNextScreenIndex (  ) : int\l+getPrevScreenIndex (  ) : int\l+onEntry (  ) : void\l+onExit (  ) : void\l+update ( deltaTime : float ) : void\l+~MainMenuScreen (  )\l-checkInput (  ) : void\l-compileShader ( shaderProgram : Falcon::ShaderProgram &, vertPath : const std::string &, fragPath : const std::string &... ) : void\l|-m_camera : Falcon::Camera2D\l-m_gameObjects : std::vector\< std::shared_ptr\< GameObject \> \>\l-m_spriteBatch : Falcon::SpriteBatch\l-m_textureProgram : Falcon::ShaderProgram\l-m_window : Falcon::Window *\l-m_world : std::unique_ptr\< b2World \>\l" shape="record" ]
"class_main_menu_screen" -> "class_game_object" [ arrowtail="odiamond" dir="back" ]
"class_main_menu_screen" -> "class_falcon_1_1_window" [ arrowtail="odiamond" dir="back" ]
"class_main_menu_screen" -> "class_falcon_1_1_sprite_batch" [ arrowtail="diamond" dir="back" ]
"class_main_menu_screen" -> "class_falcon_1_1_camera2_d" [ arrowtail="diamond" dir="back" ]
"class_main_menu_screen" -> "class_falcon_1_1_shader_program" [ arrowtail="diamond" dir="back" ]
"class_map" [ label="Map\n|+Map (  )\l+dispose (  ) : void\l+drawBackground (  ) : void\l+drawForeground (  ) : void\l+generateMap (  ) : void\l+init ( world : b2World *, mapWidth : int, mapHeight : int, tileSheetPath : const std::string, tileSize : int, gameObjec... ) : void\l+isGenerated (  ) : bool\l+~Map (  )\l-biome ( val : double ) : BIOME\l-calculateTileIndex ( sTL : BIOME, sT : BIOME, sTR : BIOME, sL : BIOME, sR : BIOME, sBL : BIOME, sB : BIOME, sBR : BIOME... ) : int\l-generateMisc ( posVec : glm::vec4 &, startingTile : int ) : void\l-generateWater ( posVec : glm::vec4 &, val : double ) : void\l-noise ( nx : double, ny : double ) : double\l|-m_colorTint : Falcon::Color\l-m_gameObjects : std::vector\< std::shared_ptr\< GameObject \> \> *\l-m_gen : noise::module::Perlin\l-m_height : int\l-m_isGenerated : bool\l-m_layerOneSpriteBatch : Falcon::SpriteBatch\l-m_layerTwoSpriteBatch : Falcon::SpriteBatch\l-m_rng : std::mt19937\l-m_tileSheet : Falcon::TileSheet\l-m_tileSheet2 : Falcon::TileSheet\l-m_tileSize : int\l-m_value : std::vector\< std::vector\< double \> \>\l-m_width : int\l" shape="record" ]
"class_map" -> "class_game_object" [ arrowtail="odiamond" dir="back" ]
"class_map" -> "struct_falcon_1_1_color" [ arrowtail="diamond" dir="back" ]
"class_map" -> "class_falcon_1_1_tile_sheet" [ arrowtail="diamond" dir="back" ]
"class_map" -> "class_falcon_1_1_sprite_batch" [ arrowtail="diamond" dir="back" ]
"class_object_factory" [ label="ObjectFactory\n|+addComponent ( obj : std::shared_ptr\< GameObject \>, pNode : tinyxml2::XMLNode * ) : void\l+createObject ( objectResource : const char * ) : std::shared_ptr\< GameObject \>\l+deleteGameObjects (  ) : void\l+deleteObject ( obj : GameObject * ) : void\l+getGameObjects (  ) : std::vector\< std::shared_ptr\< GameObject \> \> *\l+instance (  ) : ObjectFactory & \{static\}\l+setWorld ( world : b2World * ) : void\l-ObjectFactory (  )\l-getNextActorId (  ) : unsigned long\l|-m_deletedGameObjects : std::vector\< GameObject * \>\l-m_gameObjects : std::vector\< std::shared_ptr\< GameObject \> \>\l-m_lastObjectID : unsigned long\l-m_world : b2World *\l" shape="record" ]
"class_object_factory" -> "class_game_object" [ arrowtail="odiamond" dir="back" ]
"class_player_input_component" [ label="PlayerInputComponent\n|+PlayerInputComponent (  )\l/+init ( pNode : tinyxml2::XMLNode * ) : void \{virtual\}\l/+update ( obj : GameObject *, deltaTime : float ) : void \{virtual\}\l|-m_downKeyID : unsigned int\l-m_leftKeyID : unsigned int\l-m_movementSpeed : float\l-m_rightKeyID : unsigned int\l-m_upKeyID : unsigned int\l" shape="record" ]
"class_player_input_component" -> "class_component" [ arrowhead="empty" style="bold,dashed" ]
"class_sensor_component" [ label="SensorComponent\n|/+init ( pNode : tinyxml2::XMLNode * ) : void \{virtual\}\l/+update ( obj : GameObject *, deltaTime : float ) : void \{virtual\}\l|" shape="record" ]
"class_sensor_component" -> "class_collision_component" [ arrowhead="empty" style="bold" ]
"class_spawn_object_component" [ label="SpawnObjectComponent\n|/+init ( pNode : tinyxml2::XMLNode * ) : void \{virtual\}\l/+receive ( message : Message ) : void \{virtual\}\l/+update ( obj : GameObject *, deltaTime : float ) : void \{virtual\}\l-spawnObject (  ) : void\l|-m_gameObjects : std::vector\< std::shared_ptr\< GameObject \> \> *\l-m_number : int\l-m_position : glm::vec2\l" shape="record" ]
"class_spawn_object_component" -> "class_component" [ arrowhead="empty" style="bold,dashed" ]
"class_spawn_object_component" -> "class_game_object" [ arrowtail="odiamond" dir="back" ]
"class_sprite_component" [ label="SpriteComponent\n|+SpriteComponent (  )\l+draw ( spriteBatch : Falcon::SpriteBatch & ) : void\l+getDimensions (  ) : glm::vec2\l+getTileIndex (  ) : int\l+init ( filePath : const std::string &, color : Falcon::Color, dimensions : const glm::vec2, spritePosition : const glm:... ) : void\l/+init ( pNode : tinyxml2::XMLNode * ) : void \{virtual\}\l+setTileIndex ( tileIndex : int ) : void\l+setTileSheet ( filePath : const std::string & ) : void\l/+update ( obj : GameObject *, deltaTime : float ) : void \{virtual\}\l|#m_angle : float\l#m_color : Falcon::Color\l#m_destRect : glm::vec4\l#m_spriteDims : glm::vec2\l#m_spritePos : glm::vec2\l#m_tileIndex : int\l#m_tileSheet : Falcon::TileSheet\l#m_tileSize : float\l" shape="record" ]
"class_sprite_component" -> "class_component" [ arrowhead="empty" style="bold,dashed" ]
"class_sprite_component" -> "class_falcon_1_1_tile_sheet" [ arrowtail="diamond" dir="back" ]
"class_sprite_component" -> "struct_falcon_1_1_color" [ arrowtail="diamond" dir="back" ]
}
